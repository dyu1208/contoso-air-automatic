apiVersion: apps/v1
kind: Deployment
metadata:
  name: contoso-air
  labels:
    app: contoso-air
spec:
  replicas: 3
  selector:
    matchLabels:
      app: contoso-air
  template:
    metadata:
      labels:
        app: contoso-air
    spec:
      securityContext:
        # Enforce the RuntimeDefault secure computing profile
        seccompProfile:
          type: RuntimeDefault
      affinity:
        # Pod anti-affinity to spread replicas across different nodes
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - contoso-air
              topologyKey: kubernetes.io/hostname
      topologySpreadConstraints:
      # Topology spread constraints for improved resiliency
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: contoso-air
      containers:
      - name: contoso-air
        image: contoso-air:latest  # This will be updated by CI/CD
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: PORT
          value: "3000"
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: contoso-air-config
              key: NODE_ENV
        envFrom:
        - configMapRef:
            name: contoso-air-config
        securityContext:
          # Drop all Linux capabilities following baseline Pod Security Standards
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: false  # Set to false since Node.js apps may need to write temp files
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        # Liveness probe to check if the container is alive
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        # Readiness probe to check if the container is ready to receive traffic
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        # Startup probe to give the application time to start up
        startupProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 10